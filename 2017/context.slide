Context

Copenhagen Gophers Meetup
16 Feb 2017

Klaus Post
Vivino, Senior Backend Engineer
klauspost@gmail.com
@sh0dan

* What is context?


"The circumstances that form the setting for an event, statement, or idea, and in terms of which it can be fully understood."
.caption oxforddictionaries.com

Also a package added to the standard library in Go 1.7, that provides a standardized was of conveying :

	type Context interface {
		Deadline() (deadline time.Time, ok bool)
		Done() <-chan struct{}
		Err() error
		Value(key interface{}) interface{}
	}

* What is the intended use?

- Add information about context for a call.
- Supply a standard cancellation/deadline mechanic.

Contexts are linked from a top context, where each derived context is immutable, but can create children that inherit and modify it.

Context should be passed as the first function parameter. In general it should not be stored.

* When to context?

.image context/obligatory.jpg
.caption Obligatory meme.

No. Use primarily when dealing with input/output. An image processing application probably doesn't need context unless it is uploading to S3 or similar.

* Providing context information

	package context

	type Context interface {
		...
		// Value returns the value associated with key or nil if none.
		Value(key interface{}) interface{}
	}

	// WithValue returns a copy of parent in which the value associated with key is val.
	func WithValue(parent Context, key, val interface{}) Context

It is encouraged to use these with type safe accessor functions that hides the key, for example:

	// WithReqTime sets request time.
	func WithReqTime(parent context.Context, t time.Time) context.Context

	// ReqTime returns request time, will return time.Now if it has not been set.
	func ReqTime(c context.Context) time.Time


* Creating Contexts

You may be in a situation where you don't have a parent context.

New:

- [[https://golang.org/pkg/context/#Background][context.Background()]] provides a "clean" base.
- [[https://golang.org/pkg/context/#TODO][context.TODO()]] is a good way of signalling when you have a function that requires context, but you don't have one.
- testing Context ([[https://github.com/golang/go/issues/18199][not in Go 1.8]]). Provide your own helper for cancellation and logging.

Provided:

- [[https://golang.org/pkg/net/http/#Request.Context][http.Request]] provides a context that is cancelled when request is finished.

* Usage of context information

Typical usage can include:

- Adding information for logging, eg. Request ID.
- Linking benchmarks to requests.
- Giving access to a logger, so it can be overridden by tests, etc.

Do not use for:

- Passing parameters. Obscures code.

See Package userip in the [[https://blog.golang.org/context][context blog post]] for another good example.


* Cancellation

.image context/cancelled.jpg
.caption Dreams Cancelled (CC BY-NC) Jeremy Brooks.

Go contexts provide a standardized way of cancelling contexts.

- Explitcit cancellation.
- Deadline.

* Cancellation Use

- Explitcit cancellation

	func WithCancel(parent Context) (ctx Context, cancel CancelFunc)

- With deadline

	func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)
	func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

An important concept is that cancellation only affects children, so parents are not cancelled.

However, be aware of the scope of the context. You may want goroutines to live beyond the lifetime of your request.

* Usage @Vivino

.image context/vivino_app_icon_200.png

- Benchmark http handlers, including segments/datastore/external timing.
- Provide logging context, including request ID to logged content.
- Provide context for errors.
- Benchmark Kafka message processing.
- Request processing cancellation.
- New code must have context. Existing code converted when touched.

* contx package

Some of the functions we provide:

.code context/contx.go


* Resources

- [[https://golang.org/pkg/context/][Official context package]]. Definitive Reference.
- [[https://blog.golang.org/context][Go Concurrency Patterns: Context]]. Background on implementation and examples.
- [[https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39#.h30s4r9f4][How to correctly use context.Context in Go 1.7]]. Good introduction to context and some best practice.
- [[https://www.calhoun.io/pitfalls-of-context-values-and-how-to-avoid-or-mitigate-them/][Pitfalls of context values and how to avoid or mitigate them in Go]]. Opinionated, but has many good observations.

* Conclusion

- Have a policy on contexts.
- Integrate them early, even if they are of little use.
- Context should add information, code should not make choices based on it.
- Create wrappers for all context operations.

.image context/no-context.jpg

* Questions

.image context/questions.png

Feel free to ask questions, or ask later.


